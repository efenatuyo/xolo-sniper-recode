
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage
import subprocess
import sys
import json

OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path("assets")


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)

window = Tk()

def open_home_page():
    window.destroy()  # Close the current window
    subprocess.run(["python", f"{sys.path[0]}/../gui.py"])  # Open the home page

def save(auto: str, price: int, search: int, buy: int, wait: int, max_req: int, sleep: str, items: str):

    auto = auto.get()
    price = price.get()
    search = search.get()
    buy = buy.get()
    wait = wait.get()
    max_req = max_req.get()
    sleep = sleep.get()
    items = items.get(1.0, "end-1c")
    auto = str(auto)
    price = int(price)
    search = int(search)
    buy = int(buy)
    wait = int(wait)
    max_req = int(max_req)
    sleep = str(sleep)
    items = str(items)

    def item_split(items: str):
        return items.split("\n")
    def sleeper(sleep: str):
        if sleep == "true" or sleep == "True":
            return True
        if sleep == "false" or sleep == "False":
            return False
        else:
            return sleep

    with open(sys.path[0] + "/../config.json", "r") as f:
        config = json.loads(f.read())
    
    if auto == "":
        config["auto_search"]["auto_search_key"] = ""
        config["auto_search"]["autosearch"] = False
    else:
        config["auto_search"]["auto_search_key"] = auto
        config["auto_search"]["autosearch"] = True
    config["global_max_price"] = price
    config["threads"]["searcherv2_threads"] = search
    config["threads"]["buy_threads"] = buy
    config["antiratelimit"]["v1_wait_time"] = wait
    config["antiratelimit"]["v2_max_requests_per_minute"] = max_req
    config["antiratelimit"]["ai_sleep"] = sleeper(sleep)
    config["items"] = item_split(items)
    config = json.dumps(config, indent=4, sort_keys=False)
    with open(sys.path[0] + "/../config.json", "w") as f:
        f.write(config)
    return

class SetDefault:
    def __init__(self):
        with open(sys.path[0] + "/../config.json", "r") as f:
            config = json.loads(f.read())
            print(config)
            self.auto_search = config["auto_search"]["auto_search_key"]
            self.global_max_price = config["global_max_price"]
            self.searcherv2_threads = config["threads"]["searcherv2_threads"]
            self.buy_threads = config["threads"]["buy_threads"]
            self.v1_wait_time = config["antiratelimit"]["v1_wait_time"]
            self.v2_max_requests_per_minute = config["antiratelimit"]["v2_max_requests_per_minute"]
            self.ai_sleep = config["antiratelimit"]["ai_sleep"]
            self.items = config["items"]
    def set(self, auto, price, v2t, bt, v1w, v2mr, ai, items):
        auto.insert(0, str(self.auto_search))
        price.insert(0, str(self.global_max_price))
        v2t.insert(0, str(self.searcherv2_threads))
        bt.insert(0, str(self.buy_threads))
        v1w.insert(0, str(self.v1_wait_time))
        v2mr.insert(0, str(self.v2_max_requests_per_minute))
        ai.insert(0, str(self.ai_sleep))
        items.insert(1.0, "\n".join(self.items))

window.geometry("738x384")
window.configure(bg = "#132020")


canvas = Canvas(
    window,
    bg = "#132020",
    height = 384,
    width = 738,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)

canvas.place(x = 0, y = 0)
canvas.create_text(
    296.0,
    12.0,
    anchor="nw",
    text="Config",
    fill="#FFFFFF",
    font=("Inter", 50 * -1)
)

back_image = PhotoImage(
    file=relative_to_assets("back.png"))
back_button = Button(
    image=back_image,
    borderwidth=0,
    highlightthickness=0,
    command=open_home_page,
    relief="flat"
)
back_button.place(
    x=10.0,
    y=10.0,
    width=136.0,
    height=64.0
)

save_image = PhotoImage(
    file=relative_to_assets("save.png"))
save_button = Button(
    image=save_image,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: save(auto_key, max_price, searcher_threads, buy_threads, wait, v2_max_req, sleep, items),
    relief="flat"
)
save_button.place(
    x=600.0,
    y=10.0,
    width=128.0,
    height=64.0
)

export_image = PhotoImage(
    file=relative_to_assets("export.png"))
export_button = Button(
    image=export_image,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: print("export_button clicked"),
    relief="flat"
)
export_button.place(
    x=462.0,
    y=9.0,
    width=128.0,
    height=64.0
)

import_image = PhotoImage(
    file=relative_to_assets("import.png"))
import_button = Button(
    image=import_image,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: print("import_button clicked"),
    relief="flat"
)
import_button.place(
    x=157.0,
    y=9.0,
    width=128.0,
    height=64.0
)

entry_image = PhotoImage(
    file=relative_to_assets("entry.png"))
max_price_bg = canvas.create_image(
    256.0,
    160.5,
    image=entry_image
)
max_price = Entry(
    bd=0,
    bg="#D9D9D9",
    fg="#000716",
    highlightthickness=0
)
max_price.place(
    x=224.0,
    y=139.0,
    width=64.0,
    height=41.0
)

canvas.create_text(
    209.0,
    115.0,
    anchor="nw",
    text="Max price",
    fill="#FFFFFF",
    font=("Inter", 20 * -1)
)

v2_max_req_bg = canvas.create_image(
    256.0,
    334.5,
    image=entry_image
)
v2_max_req = Entry(
    bd=0,
    bg="#D9D9D9",
    fg="#000716",
    highlightthickness=0
)
v2_max_req.place(
    x=224.0,
    y=313.0,
    width=64.0,
    height=41.0
)

canvas.create_text(
    176.0,
    289.0,
    anchor="nw",
    text="V2 max requests",
    fill="#FFFFFF",
    font=("Inter", 20 * -1)
)

sleep_bg = canvas.create_image(
    437.0,
    334.5,
    image=entry_image
)
sleep = Entry(
    bd=0,
    bg="#D9D9D9",
    fg="#000716",
    highlightthickness=0
)
sleep.place(
    x=405.0,
    y=313.0,
    width=64.0,
    height=41.0
)

canvas.create_text(
    375.0,
    289.0,
    anchor="nw",
    text="ai_sleep (bool)",
    fill="#FFFFFF",
    font=("Inter", 20 * -1)
)

wait_bg = canvas.create_image(
    79.0,
    334.5,
    image=entry_image
)
wait = Entry(
    bd=0,
    bg="#D9D9D9",
    fg="#000716",
    highlightthickness=0
)
wait.place(
    x=47.0,
    y=313.0,
    width=64.0,
    height=41.0
)

canvas.create_text(
    21.0,
    289.0,
    anchor="nw",
    text="V1 wait time",
    fill="#FFFFFF",
    font=("Inter", 20 * -1)
)

searcher_threads_bg = canvas.create_image(
    84.0,
    237.5,
    image=entry_image
)
searcher_threads = Entry(
    bd=0,
    bg="#D9D9D9",
    fg="#000716",
    highlightthickness=0
)
searcher_threads.place(
    x=52.0,
    y=216.0,
    width=64.0,
    height=41.0
)

canvas.create_text(
    2.0,
    192.0,
    anchor="nw",
    text="Searcher threads",
    fill="#FFFFFF",
    font=("Inter", 20 * -1)
)

buy_threads_bg = canvas.create_image(
    256.0,
    249.5,
    image=entry_image
)
buy_threads = Entry(
    bd=0,
    bg="#D9D9D9",
    fg="#000716",
    highlightthickness=0
)
buy_threads.place(
    x=224.0,
    y=228.0,
    width=64.0,
    height=41.0
)

canvas.create_text(
    199.0,
    204.0,
    anchor="nw",
    text="Buy threads",
    fill="#FFFFFF",
    font=("Inter", 20 * -1)
)

auto_key_bg = canvas.create_image(
    79.0,
    160.5,
    image=entry_image
)
auto_key = Entry(
    bd=0,
    bg="#D9D9D9",
    fg="#000716",
    highlightthickness=0
)
auto_key.place(
    x=47.0,
    y=139.0,
    width=64.0,
    height=41.0
)

canvas.create_text(
    10.0,
    115.0,
    anchor="nw",
    text="Autosearch key",
    fill="#FFFFFF",
    font=("Inter", 20 * -1)
)

items_bg = canvas.create_image(
    618.0,
    235.5,
    image=entry_image
)
items = Text(
    bd=0,
    bg="#D9D9D9",
    fg="#000716",
    highlightthickness=0
)
items.place(
    x=516.0,
    y=115.0,
    width=204.0,
    height=239.0
)

canvas.create_text(
    405.0,
    115.0,
    anchor="nw",
    text="Item ID(s):\nSeparate by line",
    fill="#FFFFFF",
    font=("Inter", 20 * -1)
)

setter = SetDefault()
setter.set(auto_key, max_price, searcher_threads, buy_threads, wait, v2_max_req, sleep, items)

window.resizable(False, False)
window.mainloop()
